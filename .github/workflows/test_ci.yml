name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:  # Allow manual runs of the workflow

permissions:
  contents: write
  pages: write
  id-token: write
  security-events: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.11, 3.12]  # Test across multiple Python versions

    steps:
    # Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v3

    # Set up Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    # Cache dependencies
    - name: Cache Python packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-

    # Install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install "apache-airflow[crypto,postgres]" --constraint "https://raw.githubusercontent.com/apache/airflow/constraints-2.6.2/constraints-3.11.txt"

    # Debug Installed Versions
    - name: Debug Installed Versions
      run: |
        python --version
        pytest --version
        pip list | grep pluggy

    # Export PYTHONPATH
    - name: Set PYTHONPATH
      run: echo "PYTHONPATH=./src" >> $GITHUB_ENV

    # Debug PYTHONPATH
    - name: Debug PYTHONPATH
      run: echo $PYTHONPATH

    # Clean unused imports
    - name: Remove unused variables and imports
      run: |
        autoflake --in-place --remove-unused-variables --remove-all-unused-imports -r src/ tests/

    # Format code with Black
    - name: Format code with Black
      run: black --check src/ tests/

    # Run Flake8 for linting
    - name: Run Flake8
      run: flake8 src/ tests/

    # Run tests with coverage
    - name: Run tests with coverage
      run: |
        echo "Running tests with coverage..."
        pytest --cov=src --cov-report=html tests/
        echo "Tests completed."
        ls -la htmlcov  # Check if htmlcov directory was created

    # Upload coverage report
    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: htmlcov/

    # Deploy coverage report to GitHub Pages
    - name: Deploy Coverage to GitHub Pages
      if: success()
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./htmlcov

  lint:
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v3

    # Set up Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    # Install linters
    - name: Install linters
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black

    # Run Flake8
    - name: Run Flake8
      run: flake8 src/ tests/

    # Run Black
    - name: Check code formatting
      run: black --check src/ tests/

  codeql:
    name: Analyze with CodeQL
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write   # Required for uploading results to GitHub
    steps:
    # Initialize CodeQL
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: python
        # Optional: Uncomment this line if you have advanced configurations
        # config-file: .github/codeql/codeql-config.yml

    # Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v3

    # Run CodeQL analysis
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
